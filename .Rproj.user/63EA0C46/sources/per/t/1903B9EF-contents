{
  #' @details limpar memória
  rm(list = ls())
  
  #' @details direcionar memória para processamento temporário em disco
  { 
    if (!dir.exists("c:/R_temp")){dir.create("c:/R_temp")}
    tempdir <- function() "c:/R_temp"
    unlockBinding("tempdir", baseenv()) 
    assignInNamespace("tempdir", tempdir, ns="base", envir=baseenv())
    assign("tempdir", tempdir, baseenv())
    lockBinding("tempdir", baseenv())
    tempdir()
  }
  
  #' @details carregar funcões para mensurar tempos de processamento
  {
    tempo_processo <- data.frame(nome_processo=NA,
                                 tempo_processamento=NA)[-1,]
    
    inicia_tempo_processamento <- function(nome_processo='',
                                           tempo_processo=NA)
    {
      return(list(ini.time = Sys.time(),
                  nome_processo=nome_processo,
                  tempo_processo=tempo_processo))
    }  
    
    get_tempo_processamento <- function(tempo_processo_tmp)
    {
      
      tempo_processamento <- difftime(Sys.time(), tempo_processo_tmp$ini.time , units = 'min')
      tempo_processo <- rbind(tempo_processo_tmp$tempo_processo,
                              data.frame(nome_processo=tempo_processo_tmp$nome_processo,
                                         tempo_processamento=tempo_processamento))
      print(tempo_processo)
      return(tempo_processo)
    }  
  }
  
  #' @details inicar tempo de processamento
  tempo_processo_tmp <- inicia_tempo_processamento('Preparação do ambiente de trabalho em R', tempo_processo)
  #' @details carregar pacotes básicos
  {
    # devtools::install_github("pablopains/parseGBIF")

    library(parseGBIF)
    
    library(stringr)
    library(dplyr)
    
  }
  
  #' @details finalizar tempo de processamento
  tempo_processo <- get_tempo_processamento(tempo_processo_tmp)
  
}

                                                 
path.pkg <- 'C:\\parseGBIF - github.com\\parseGBIF'
setwd(path.pkg)



# path.pkg <- 'C:\\parseGBIF - github.com\\parseGBIF'
# setwd(path.pkg)
# devtools::load_all(as.package(path.pkg))

#
tempo_processo_tmp <- inicia_tempo_processamento('prepare_gbif_occurrence_data: ', tempo_processo)

occ_file <- 'https://raw.githubusercontent.com/pablopains/parseGBIF/main/dataGBIF/Achatocarpaceae/occurrence.txt'
occ_file <- 'C:\\Dados\\Kew\\data\\download\\Myrtaceae\\occurrence.txt'

occ <- prepare_gbif_occurrence_data(gbif_occurrece_file = occ_file, columns = 'standard')

head(occ)

tempo_processo <- get_tempo_processamento(tempo_processo_tmp)




#
tempo_processo_tmp <- inicia_tempo_processamento('wcvp_get_data: ', tempo_processo)

wcvp_names <- parseGBIF::wcvp_get_data(path_results= 'C:\\Dados\\Kew\\data')$wcvp_names

tempo_processo <- get_tempo_processamento(tempo_processo_tmp)




#
tempo_processo_tmp <- inicia_tempo_processamento('wcvp_check_name_batch: ', tempo_processo)

names.checked <- parseGBIF::wcvp_check_name_batch(occ = occ,
                                       wcvp_names =  wcvp_names,
                                       if_author_fails_try_without_combinations = TRUE,
                                       wcvp_selected_fields = 'standard',
                                       silence = FALSE)

names(names.checked)

# file.names.checked <-  'C:\\Dados\\Kew\\data\\download\\Myrtaceae\\file_wcvp_check_name.csv'
# 
# write.csv(names.checked$occ_wcvp_check_name,
#           file.names.checked, 
#           row.names = FALSE, 
#           fileEncoding = "UTF-8", 
#           na = "")
tempo_processo <- get_tempo_processamento(tempo_processo_tmp)




#
tempo_processo_tmp <- inicia_tempo_processamento('collectors_prepare_dictionary: ', tempo_processo)

collectorsDictionary.dataset <- parseGBIF::collectors_prepare_dictionary(occ = occ)

head(collectorsDictionary.dataset)

# file.collectorsDictionary.dataset <-  'C:\\Dados\\Kew\\data\\download\\Myrtaceae\\file_collectorsDictionary_dataset.csv'
# 
# write.csv(collectorsDictionary.dataset,
#           file.collectorsDictionary.dataset, 
#           row.names = FALSE, 
#           fileEncoding = "UTF-8", 
#           na = "")
tempo_processo <- get_tempo_processamento(tempo_processo_tmp)




#
tempo_processo_tmp <- inicia_tempo_processamento('generate_collection_event_key: ', tempo_processo)

# file.collectorsDictionary.dataset.checked <-  'C:\\Dados\\Kew\\data\\download\\Myrtaceae\\file_collectorsDictionary_dataset_check_neworder.csv'
# 
# # occ_collectorsDictionary <- parseGBIF::generate_collection_event_key(occ=occ,
# #                                                          collectorDictionary_checked_file = file.collectorsDictionary.dataset.checked,
# #                                                          silence = FALSE)
# library(stringr)
# library(dplyr)

occ_collectorsDictionary <- generate_collection_event_key(occ=occ,
                                                          # collectorDictionary_checked_file = file.collectorsDictionary.dataset.checked,
                                                          collectorDictionary_checked = collectorsDictionary.dataset,
                                                          silence = FALSE)


# head(occ_collectorsDictionary$occ_collectorsDictionary)
# 
# file.occ.collectorsDictionary <-  'C:\\Dados\\Kew\\data\\download\\Myrtaceae\\occ_collectorsDictionary.csv'
# 
# write.csv(occ_collectorsDictionary$occ_collectorsDictionary,
#           file.occ.collectorsDictionary, 
#           row.names = FALSE, 
#           fileEncoding = "UTF-8", 
#           na = "")

tempo_processo <- get_tempo_processamento(tempo_processo_tmp)


#
tempo_processo_tmp <- inicia_tempo_processamento('extract_gbif_issue: ', tempo_processo)

occ_gbif_issue <- parseGBIF::extract_gbif_issue(occ = occ)

# file.occ_gbif_issue <-  'C:\\Dados\\Kew\\data\\download\\Myrtaceae\\file_occ_gbif_issue.csv'
# write.csv(occ_gbif_issue$occ_gbif_issue,
#           file.occ_gbif_issue, 
#           row.names = FALSE, 
#           fileEncoding = "UTF-8", 
#           na = "")

tempo_processo <- get_tempo_processamento(tempo_processo_tmp)



#
# tempo_processo_tmp <- inicia_tempo_processamento('extract_gbif_issue: ', tempo_processo)
# 
# occ_gbif_issue <- parseGBIF::extract_gbif_issue(occ = occ)
# 
# file.occ_gbif_issue <-  'C:\\Dados\\Kew\\data\\download\\Myrtaceae\\file_occ_gbif_issue.csv'
# write.csv(occ_gbif_issue$occ_gbif_issue,
#           file.occ_gbif_issue, 
#           row.names = FALSE, 
#           fileEncoding = "UTF-8", 
#           na = "")
# 
# tempo_processo <- get_tempo_processamento(tempo_processo_tmp)
# 
# 
# 
# #






digital_voucher <- select_digital_voucher_v2.1(occ = occ,
                       occ_gbif_issue = occ_gbif_issue$occ_gbif_issue,
                       occ_wcvp_check_name = names.checked$occ_wcvp_check_name,
                       occ_collectorsDictionary = occ_collectorsDictionary$occ_collectorsDictionary,
                       silence = FALSE)


results <- export_data_v2.2(occ_digital_voucher = digital_voucher$all_data)



tempo_processo_tmp <- inicia_tempo_processamento('select_digital_voucher: ', tempo_processo)

# occ_gbif_issue <- occ_gbif_issue$occ_gbif_issue
file.occ_gbif_issue <-  'C:\\Dados\\Kew\\data\\download\\Myrtaceae\\file_occ_gbif_issue.csv'
occ_gbif_issue <- readr::read_delim(file = file.occ_gbif_issue,
                                    delim = ',',
                                    locale = readr::locale(encoding = "UTF-8"),
                                    show_col_types = FALSE) %>%
  data.frame()


file.names.checked <-  'C:\\Dados\\Kew\\data\\download\\Myrtaceae\\file_wcvp_check_name.csv'
names.checked <- readr::read_delim(file = file.names.checked,
                                   delim = ',',
                                   locale = readr::locale(encoding = "UTF-8"),
                                   show_col_types = FALSE) %>%
  data.frame()



file.occ_collectorsDictionary <-  'C:\\Dados\\Kew\\data\\download\\Myrtaceae\\occ_collectorsDictionary.csv'
occ_collectorsDictionary <- readr::read_delim(file = file.occ_collectorsDictionary,
                                   delim = ',',
                                   locale = readr::locale(encoding = "UTF-8"),
                                   show_col_types = FALSE) %>%
  data.frame()



{

  # occ_collectorsDictionary <- occ_collectorsDictionary$occ_collectorsDictionary
  # occ_gbif_issue <- occ_gbif_issue$occ_gbif_issue
  # names.checked <- names.checked$occ_wcvp_check_name 
  
  
key <- occ_collectorsDictionary$Ctrl_key_family_recordedBy_recordNumber %>% unique()
n_k <- NROW(key)
i_key <- 1:n_k

ind_k1 <- i_key <= (n_k/3)
ind_k2 <- i_key > (n_k/3) & i_key <= ((n_k/3)*2)
ind_k3 <- i_key > (n_k/3)*2
n_k
sum(ind_k1==TRUE) + sum(ind_k2==TRUE) + sum(ind_k3==TRUE)

i_k_1 <- occ_collectorsDictionary$Ctrl_key_family_recordedBy_recordNumber %in% key[ind_k1==TRUE]
i_k_2 <- occ_collectorsDictionary$Ctrl_key_family_recordedBy_recordNumber %in% key[ind_k2==TRUE]
i_k_3 <- occ_collectorsDictionary$Ctrl_key_family_recordedBy_recordNumber %in% key[ind_k3==TRUE]

tempo_processo_tmp <- inicia_tempo_processamento('select_digital_voucher terço 1: ', tempo_processo)
occ_digital_voucher_t1 <- select_digital_voucher_v2.1(occ = occ[i_k_1==TRUE,],
                                                     occ_gbif_issue = occ_gbif_issue[i_k_1==TRUE,],
                                                     occ_wcvp_check_name = names.checked[i_k_1==TRUE,],
                                                     occ_collectorsDictionary = occ_collectorsDictionary[i_k_1==TRUE,],
                                                     silence = FALSE)
tempo_processo <- get_tempo_processamento(tempo_processo_tmp)
tempo_processo


tempo_processo_tmp <- inicia_tempo_processamento('select_digital_voucher terço 2: ', tempo_processo)
occ_digital_voucher_t2 <- select_digital_voucher_v2.1(occ = occ[i_k_2==TRUE,],
                                                     occ_gbif_issue = occ_gbif_issue[i_k_2==TRUE,],
                                                     occ_wcvp_check_name = names.checked[i_k_2==TRUE,],
                                                     occ_collectorsDictionary = occ_collectorsDictionary[i_k_2==TRUE,],
                                                     silence = FALSE)
tempo_processo <- get_tempo_processamento(tempo_processo_tmp)
tempo_processo

tempo_processo_tmp <- inicia_tempo_processamento('select_digital_voucher terço 3: ', tempo_processo)
occ_digital_voucher_t3 <- select_digital_voucher_v2.1(occ = occ[i_k_3==TRUE,],
                                                     occ_gbif_issue = occ_gbif_issue[i_k_3==TRUE,],
                                                     occ_wcvp_check_name = names.checked[i_k_3==TRUE,],
                                                     occ_collectorsDictionary = occ_collectorsDictionary[i_k_3==TRUE,],
                                                     silence = FALSE)
tempo_processo <- get_tempo_processamento(tempo_processo_tmp)
tempo_processo

occ_digital <- list(all_data =  {} %>% data.frame(stringsAsFactors = FALSE),
                    useable_data_raw = {},
                    duplicates = {},
                    unusable_data_raw = {},
                    occ_digital_voucher = {},
                    occ_results = {})

occ_digital$all_data <- rbind(occ_digital_voucher_t1$all_data,
                                 occ_digital_voucher_t2$all_data,
                                 occ_digital_voucher_t3$all_data)


occ_digital$useable_data_raw <- rbind(occ_digital_voucher_t1$useable_data_raw,
                              occ_digital_voucher_t2$useable_data_raw,
                              occ_digital_voucher_t3$useable_data_raw)


occ_digital$unusable_data_raw <- rbind(occ_digital_voucher_t1$unusable_data_raw,
                              occ_digital_voucher_t2$unusable_data_raw,
                              occ_digital_voucher_t3$unusable_data_raw)

occ_digital$occ_digital_voucher <- rbind(occ_digital_voucher_t1$occ_digital_voucher,
                                       occ_digital_voucher_t2$occ_digital_voucher,
                                       occ_digital_voucher_t3$occ_digital_voucher)

occ_digital$occ_results <- rbind(occ_digital_voucher_t1$occ_results,
                                       occ_digital_voucher_t2$occ_results,
                                       occ_digital_voucher_t3$occ_results)

}



#
# occ_digital_voucher <- parseGBIF::select_digital_voucher(occ = occ,
#                                                          occ_gbif_issue = occ_gbif_issue$occ_gbif_issue,
#                                                          occ_wcvp_check_name = names.checked$occ_wcvp_check_name ,
#                                                          occ_collectorsDictionary = occ_collectorsDictionary$occ_collectorsDictionary,
#                                                          silence = FALSE)


key <- occ_collectorsDictionary$Ctrl_key_family_recordedBy_recordNumber %>% unique()
n_k <- NROW(key)
i_key <- 1:n_k
  
ind_k <- i_key <= (n_k/2)

n_k
sum(ind_k==TRUE) +sum(ind_k==FALSE)

i_k_1 <- occ_collectorsDictionary$Ctrl_key_family_recordedBy_recordNumber %in% key[ind_k==TRUE]

i_k_2 <- occ_collectorsDictionary$Ctrl_key_family_recordedBy_recordNumber %in% key[ind_k==FALSE]

tempo_processo_tmp <- inicia_tempo_processamento('select_digital_voucher metade 1: ', tempo_processo)
occ_digital_voucher_1 <- select_digital_voucher_v2.1(occ = occ[i_k_1==TRUE,],
                                                         occ_gbif_issue = occ_gbif_issue[i_k_1==TRUE,],
                                                         occ_wcvp_check_name = names.checked[i_k_1==TRUE,],
                                                         occ_collectorsDictionary = occ_collectorsDictionary[i_k_1==TRUE,],
                                                         silence = FALSE)
tempo_processo <- get_tempo_processamento(tempo_processo_tmp)
tempo_processo

tempo_processo_tmp <- inicia_tempo_processamento('select_digital_voucher metade 2: ', tempo_processo)
occ_digital_voucher_2 <- select_digital_voucher_v2.1(occ = occ[i_k_2==TRUE,],
                                                     occ_gbif_issue = occ_gbif_issue[i_k_2==TRUE,],
                                                     occ_wcvp_check_name = names.checked[i_k_2==TRUE,],
                                                     occ_collectorsDictionary = occ_collectorsDictionary[i_k_2==TRUE,],
                                                     silence = FALSE)
tempo_processo <- get_tempo_processamento(tempo_processo_tmp)
tempo_processo

tempo_processo_tmp <- inicia_tempo_processamento('select_digital_voucher tudo: ', tempo_processo)
occ_digital_voucher_all <- select_digital_voucher_v2.1(occ = occ,
                                                     occ_gbif_issue = occ_gbif_issue,
                                                     occ_wcvp_check_name = names.checked,
                                                     occ_collectorsDictionary = occ_collectorsDictionary,
                                                     silence = FALSE)
tempo_processo <- get_tempo_processamento(tempo_processo_tmp)
tempo_processo

tempo_processo$tempo_processamento[1] + tempo_processo$tempo_processamento[2]

occ_collectorsDictionary <- occ_collectorsDictionary$occ_collectorsDictionary
occ_gbif_issue <- occ_gbif_issue$occ_gbif_issue
names.checked <- occ_wcvp_check_name 

key <- occ_collectorsDictionary$Ctrl_key_family_recordedBy_recordNumber %>% unique()
n_k <- NROW(key)
i_key <- 1:n_k

ind_k1 <- i_key <= (n_k/3)
ind_k2 <- i_key > (n_k/3) & i_key <= ((n_k/3)*2)
ind_k3 <- i_key > (n_k/3)*2
n_k
sum(ind_k1==TRUE) + sum(ind_k2==TRUE) + sum(ind_k3==TRUE)

i_k_1 <- occ_collectorsDictionary$Ctrl_key_family_recordedBy_recordNumber %in% key[ind_k1==TRUE]
i_k_2 <- occ_collectorsDictionary$Ctrl_key_family_recordedBy_recordNumber %in% key[ind_k2==TRUE]
i_k_3 <- occ_collectorsDictionary$Ctrl_key_family_recordedBy_recordNumber %in% key[ind_k3==TRUE]



select_digital_voucher(occ = occ,
                            occ_gbif_issue = occ_gbif_issue,
                            occ_wcvp_check_name = names.checked,
                            occ_collectorsDictionary = occ_collectorsDictionary,
                            silence = FALSE)



library(foreach)
library(doParallel)

n.cores <- 3
cl <- makeCluster(n.cores)
registerDoParallel(cl)
getDoParWorkers()

raizes <- foreach(i = 1:3) %dopar%  {
  
  if(i==1)
  {
    select_digital_voucher_v2.1(occ = occ[i_k_1==TRUE,],
                                occ_gbif_issue = occ_gbif_issue[i_k_1==TRUE,],
                                occ_wcvp_check_name = names.checked[i_k_1==TRUE,],
                                occ_collectorsDictionary = occ_collectorsDictionary[i_k_1==TRUE,],
                                silence = FALSE)
  }
  
}
library(stringr)

library(parallelly)
library(future)
library(furrr)
library(tictoc)
parallelly::availableCores()

future::plan(
  strategy = future::multisession(workers = 3)
)

raiz_lenta <- function(x) {
  Sys.sleep(2)
  x_sqrt <- sqrt(x)
  return(x_sqrt)
}

tictoc::tic()
exemplo_paralelo <- furrr::future_map_dbl(1:10, raiz_lenta)
tictoc::toc(log = TRUE)


tictoc::tic()

X <- matrix(c(1:4, 1, 6:8), nrow = 2L)

Y0 <- apply(X, MARGIN = 1L, FUN = table)
Y1 <- future_apply(X, MARGIN = 1L, FUN = table)
print(Y1)
stopifnot(all.equal(Y1, Y0, check.attributes = FALSE)) ## FIXME

tictoc::toc(log = TRUE)

tempo_processo_tmp <- inicia_tempo_processamento('select_digital_voucher terço 1: ', tempo_processo)
occ_digital_voucher_1 <- select_digital_voucher_v2.1(occ = occ[i_k_1==TRUE,],
                                                     occ_gbif_issue = occ_gbif_issue[i_k_1==TRUE,],
                                                     occ_wcvp_check_name = names.checked[i_k_1==TRUE,],
                                                     occ_collectorsDictionary = occ_collectorsDictionary[i_k_1==TRUE,],
                                                     silence = FALSE)
tempo_processo <- get_tempo_processamento(tempo_processo_tmp)
tempo_processo


tempo_processo_tmp <- inicia_tempo_processamento('select_digital_voucher terço 2: ', tempo_processo)
occ_digital_voucher_1 <- select_digital_voucher_v2.1(occ = occ[i_k_2==TRUE,],
                                                     occ_gbif_issue = occ_gbif_issue[i_k_2==TRUE,],
                                                     occ_wcvp_check_name = names.checked[i_k_2==TRUE,],
                                                     occ_collectorsDictionary = occ_collectorsDictionary[i_k_2==TRUE,],
                                                     silence = FALSE)
tempo_processo <- get_tempo_processamento(tempo_processo_tmp)
tempo_processo

tempo_processo_tmp <- inicia_tempo_processamento('select_digital_voucher terço 3: ', tempo_processo)
occ_digital_voucher_1 <- select_digital_voucher_v2.1(occ = occ[i_k_3==TRUE,],
                                                     occ_gbif_issue = occ_gbif_issue[i_k_3==TRUE,],
                                                     occ_wcvp_check_name = names.checked[i_k_3==TRUE,],
                                                     occ_collectorsDictionary = occ_collectorsDictionary[i_k_3==TRUE,],
                                                     silence = FALSE)
tempo_processo <- get_tempo_processamento(tempo_processo_tmp)
tempo_processo


tempo_processo_tmp <- inicia_tempo_processamento('select_digital_voucher 2: ', tempo_processo)
occ_digital_voucher2 <- select_digital_voucher_v2(occ = occ,
                                                 occ_gbif_issue = occ_gbif_issue$occ_gbif_issue,
                                                 occ_wcvp_check_name = names.checked$occ_wcvp_check_name,
                                                 occ_collectorsDictionary = occ_collectorsDictionary$occ_collectorsDictionary,
                                                 silence = FALSE)
tempo_processo <- get_tempo_processamento(tempo_processo_tmp)

tempo_processo_tmp <- inicia_tempo_processamento('select_digital_voucher 2.1: ', tempo_processo)
occ_digital_voucher2.1 <- select_digital_voucher_v2.1(occ = occ,
                                                   occ_gbif_issue = occ_gbif_issue$occ_gbif_issue,
                                                   occ_wcvp_check_name = names.checked$occ_wcvp_check_name,
                                                   occ_collectorsDictionary = occ_collectorsDictionary$occ_collectorsDictionary,
                                                   silence = FALSE)
tempo_processo <- get_tempo_processamento(tempo_processo_tmp)



file.occ_digital_voucher <-  'C:\\Users\\Pablo Hendrigo\\Downloads\\occ_digital_voucher_2_all.csv'
write.csv(occ_digital_voucher2$all_data,
          file.occ_digital_voucher, 
          row.names = FALSE, 
          fileEncoding = "UTF-8", 
          na = "")

file.occ_digital_voucher <-  'C:\\Users\\Pablo Hendrigo\\Downloads\\occ_digital_voucher_2.1_all.csv'
write.csv(occ_digital_voucher2.1$all_data,
          file.occ_digital_voucher, 
          row.names = FALSE, 
          fileEncoding = "UTF-8", 
          na = "")

tempo_processo


any(occ_digital_voucher2$all_data==occ_digital_voucher2.1$all_data)==FALSE


# occ_file <- 'https://raw.githubusercontent.com/pablopains/parseGBIF/main/dataGBIF/Achatocarpaceae/occurrence.txt'
# occ <- prepare_gbif_occurrence_data(gbif_occurrece_file = occ_file, columns = 'standard')

# teste junção
# ACHATOCARPACEAE_ALCORN_

# ACHATOCARPACEAE_ALISCIONI_


occ_digital_voucher <- {}

occ_digital_voucher <- select_digital_voucher_v2(occ = occ,
                                                 occ_gbif_issue,
                                                 occ_wcvp_check_name,
                                                 occ_collectorsDictionary,
                                                 silence = FALSE)


names(occ_digital_voucher)


file.occ_digital_voucher <-  'C:\\Users\\Pablo Hendrigo\\Downloads\\occ_digital_voucher_4.csv'
write.csv(occ_digital_voucher$occ_digital_voucher,
          file.occ_digital_voucher, 
          row.names = FALSE, 
          fileEncoding = "UTF-8", 
          na = "")


file.occ_digital_voucher <-  'C:\\Users\\Pablo Hendrigo\\Downloads\\occ_digital_voucher_4_all.csv'
write.csv(occ_digital_voucher$all_data,
          file.occ_digital_voucher, 
          row.names = FALSE, 
          fileEncoding = "UTF-8", 
          na = "")

tempo_processo <- get_tempo_processamento(tempo_processo_tmp)

#


results

#
results <- parseGBIF::export_data(occ_digital_voucher_file = file.occ_digital_voucher,
                                  merge_unusable_data = FALSE,
                                  silence = FALSE)

results <- export_data_v2(occ_digital_voucher_file = file.occ_digital_voucher,
                       merge_unusable_data = TRUE,
                       silence = FALSE)
  

names(results)

results$parseGBIF_general_summary
results$parseGBIF_merge_fields_summary
results$parseGBIF_merge_fields_summary_useable_data
results$parseGBIF_merge_fields_summary_unusable_data


NROW(results$all_data)
NROW(results$unique_collection_event_complete_merge)
NROW(results$unique_collection_event_incomplete_raw)
NROW(results$duplicates)



results2 <- parseGBIF_summary(results$all_data)

file.name <-  paste0(path_data,'\\parseGBIF_all_data\\','parseGBIF_all_data_II.csv')

occ_tmp <- readr::read_delim(file = file.name,
                                         delim = ',',
                                         locale = readr::locale(encoding = "UTF-8"),
                                         show_col_types = FALSE) %>% data.frame()


results <- export_data_v2.2(occ_digital_voucher = digital_voucher$all_data,
                          merge_unusable_data = TRUE,
                          silence = FALSE)

results2 <- parseGBIF_summary(results$all_data)




results2 <- parseGBIF_summary(occ_tmp)

names(results2)

results2$parseGBIF_general_summary
results2$parseGBIF_merge_fields_summary
results2$parseGBIF_merge_fields_summary_useable_data

file.occ_digital_voucher <-  'C:\\Users\\Pablo Hendrigo\\Downloads\\parseGBIF_general_summary.csv'
write.csv(results2$parseGBIF_general_summary,
          file.occ_digital_voucher, 
          row.names = FALSE, 
          fileEncoding = "UTF-8", 
          na = "")



file.occ_digital_voucher <-  'C:\\Users\\Pablo Hendrigo\\Downloads\\parseGBIF_merge_fields_summary.csv'
write.csv(results2$parseGBIF_merge_fields_summary,
          file.occ_digital_voucher, 
          row.names = FALSE, 
          fileEncoding = "UTF-8", 
          na = "")

file.occ_digital_voucher <-  'C:\\Users\\Pablo Hendrigo\\Downloads\\parseGBIF_merge_fields_summary_useable_data.csv'
write.csv(results2$parseGBIF_merge_fields_summary_useable_data,
          file.occ_digital_voucher, 
          row.names = FALSE, 
          fileEncoding = "UTF-8", 
          na = "")


index <- results$useable_data_merge$Ctrl_key_family_recordedBy_recordNumber %in% 'ACHATOCARPACEAE_ZARDINI_5592'

print('merged fields')
print(jsonlite::fromJSON(results$useable_data_merge$parseGBIF_duplicates_map[index==TRUE]))

print('merged fields map')
print(jsonlite::fromJSON(results$useable_data_merge$parseGBIF_merged_fields[index==TRUE]))

print('Frequency of content in fields')
print(jsonlite::fromJSON(results$useable_data_merge$parseGBIF_freq_duplicate_or_missing_data[index==TRUE]))


colnames(results$all_data)

NROW(results$occ_in_merge)
NROW(results$occ_in_raw)
NROW(results$occ_out_to_recover_merge)
NROW(results$occ_out_to_recover_raw)
NROW(results$occ_dup)

results$



for(i in 1:NROW(results$occ_in_merge))
{
  if(results$occ_in_merge$parseGBIF_merged[i] == FALSE)
  {
    next
  }
  print(i)
  
  print('campos')
  
  print(jsonlite::fromJSON(results$occ_in_merge$parseGBIF_merged_fields[i]))
  
  print('map')
  
  print(jsonlite::fromJSON(results$occ_in_merge$parseGBIF_duplicates_map[i]))
  
  print(jsonlite::fromJSON(results$occ_in_merge$parseGBIF_freq_duplicate_or_missing_data[i]))
  
  # stop()
}  


file.occ_all <-  'occ_all.csv'
write.csv(results$occ_all,
          file.occ_all,
          row.names = FALSE,
          fileEncoding = "UTF-8",
          na = "")

file.occ_in_merge <-  'occ_in_merge.csv'
write.csv(results$occ_in_merge,
          file.occ_in_merge,
          row.names = FALSE,
          fileEncoding = "UTF-8",
          na = "")



file.occ_in <-  'occ_raw.csv'
write.csv(results$occ_raw,
          file.occ_in,
          row.names = FALSE,
          fileEncoding = "UTF-8",
          na = "")


file.occ_out_to_recover <-  'occ_out_to_recover.csv'
write.csv(results$occ_out_to_recover,
          file.occ_out_to_recover,
          row.names = FALSE,
          fileEncoding = "UTF-8",
          na = "")


file.occ_dup <-  'occ_dup.csv'
write.csv(results$occ_dup,
          file.occ_dup,
          row.names = FALSE,
          fileEncoding = "UTF-8",
          na = "")


sum(results$occ_dup$Ctrl_key_family_recordedBy_recordNumber %in% 'ACHATOCARPACEAE_ZARDINI_5592')

sum(results$occ_in_merge$Ctrl_key_family_recordedBy_recordNumber %in% 'ACHATOCARPACEAE_ZARDINI_5592')

results$occ_in_merge$parseGBIF_duplicates_map[results$occ_in_merge$Ctrl_key_family_recordedBy_recordNumber %in% 'ACHATOCARPACEAE_ZARDINI_5592']

results$occ_in_merge$parseGBIF_merged_fields[results$occ_in_merge$Ctrl_key_family_recordedBy_recordNumber %in% 'ACHATOCARPACEAE_ZARDINI_5592']

print('campos')
print(jsonlite::fromJSON(results$occ_in_merge$parseGBIF_duplicates_map[results$occ_in_merge$Ctrl_key_family_recordedBy_recordNumber %in% 'ACHATOCARPACEAE_ZARDINI_5592']))

print('map')
print(jsonlite::fromJSON(results$occ_in_merge$parseGBIF_merged_fields[results$occ_in_merge$Ctrl_key_family_recordedBy_recordNumber %in% 'ACHATOCARPACEAE_ZARDINI_5592']))

print('freq')
print(jsonlite::fromJSON(results$occ_in_merge$parseGBIF_freq_duplicate_or_missing_data[results$occ_in_merge$Ctrl_key_family_recordedBy_recordNumber %in% 'ACHATOCARPACEAE_ZARDINI_5592']))




results <- list(occ_in_merge = occ_res_full,
                    occ_raw = occ_in,
                    occ_dup = occ_dup,
                    occ_out_to_recover = occ_out_to_recover)

# results$occ_in_merge %>% View(title = 'merge')



ind_t <- results$occ_in_merge$Ctrl_key_family_recordedBy_recordNumber == 'ACHATOCARPACEAE_ZARDINI_5592'
results$occ_in_merge[ind_t==TRUE,]$parseGBIF_merged_fields
results$occ_in_merge[ind_t==TRUE,]$parseGBIF_duplicates_map



# 
# 
# names(results)
# 
# 
# NROW(results$occ_in)
# 
# NROW(results$occ_out_to_recover)
# 
# NROW(results$occ_dup)
# 
# NROW(results$occ_in_merged)
# colnames(results$occ_in_merged)
# 
# View(results$occ_in_merged)
# 
# jsonlite::fromJSON(results$occ_in_merged$parseGBIF_merged_fields[54])
# 
# jsonlite::fromJSON(results$occ_in_merged$parseGBIF_merged_fields[54])
# 
# results$occ_in$Ctrl_gbifID[54]
# results$occ_in$Ctrl_language[54]
# 
# results$occ_in_merged$Ctrl_language[54]
# results$occ_in_merged$Ctrl_gbifID[54]
# 
# 
# index <- occ_dup$Ctrl_occurrenceID == "2683178"
# occ_dup[index==TRUE,]


results$all_data
