#

path.pkg <- 'C:\\parseGBIF - github.com\\parseGBIF'
setwd(path.pkg)

devtools::install_github("pablopains/parseGBIF")


library(parseGBIF)

# path.pkg <- 'C:\\parseGBIF - github.com\\parseGBIF'
# setwd(path.pkg)
# devtools::load_all(as.package(path.pkg))

#
occ_file <- 'C:\\Dados\\Kew\\data\\download\\Myrtaceae\\occurrence.txt'

occ <- parseGBIF::prepare_gbif_occurrence_data(gbif_occurrece_file = occ_file, columns = 'standard')

head(occ)

wcvp_names <- parseGBIF::wcvp_get_data(path_results= 'C:\\Dados\\Kew\\data')$wcvp_names

names.checked <- parseGBIF::wcvp_check_name_batch(occ = occ,
                                       wcvp_names =  wcvp_names,
                                       if_author_fails_try_without_combinations = TRUE,
                                       wcvp_selected_fields = 'standard',
                                       silence = FALSE)

names(names.checked)

file.names.checked <-  'C:\\Dados\\Kew\\data\\download\\Myrtaceae\\file_wcvp_check_name.csv'

write.csv(names.checked$occ_wcvp_check_name,
          file.names.checked, 
          row.names = FALSE, 
          fileEncoding = "UTF-8", 
          na = "")

#
collectorsDictionary.dataset <- parseGBIF::collectors_prepare_dictionary(occ = occ)

head(collectorsDictionary.dataset)

#
file.collectorsDictionary.dataset <-  'C:\\Dados\\Kew\\data\\download\\Myrtaceae\\file_collectorsDictionary_dataset.csv'

write.csv(collectorsDictionary.dataset,
          file.collectorsDictionary.dataset, 
          row.names = FALSE, 
          fileEncoding = "UTF-8", 
          na = "")

#
rm(names.checked)

occ_collectorsDictionary <- parseGBIF::generate_collection_event_key(occ=occ,
                                                         collectorDictionary_checked_file = file.collectorsDictionary.dataset,
                                                         silence = FALSE)


#
occ_gbif_issue <- parseGBIF::extract_gbif_issue(occ = occ)
file.occ_gbif_issue <-  'C:\\Dados\\Kew\\data\\download\\Myrtaceae\\file_occ_gbif_issue.csv'
write.csv(occ_gbif_issue$occ_gbif_issue,
          file.occ_gbif_issue, 
          row.names = FALSE, 
          fileEncoding = "UTF-8", 
          na = "")



#

occ_gbif_issue <- occ_gbif_issue$occ_gbif_issue 

file.occ_gbif_issue <-  'C:\\Dados\\Kew\\data\\download\\Myrtaceae\\file_occ_gbif_issue.csv'
occ_gbif_issue <- readr::read_delim(file = file.occ_gbif_issue,
                             delim = ',',
                             locale = readr::locale(encoding = "UTF-8"),
                             show_col_types = FALSE) %>%
  data.frame()



file.names.checked <-  'C:\\Dados\\Kew\\data\\download\\Myrtaceae\\file_wcvp_check_name.csv'
names.checked <- readr::read_delim(file = file.names.checked,
                  delim = ',',
                  locale = readr::locale(encoding = "UTF-8"),
                  show_col_types = FALSE) %>%
  data.frame()


#
occ_digital_voucher <- parseGBIF::select_digital_voucher(occ = occ,
                                                         occ_gbif_issue = occ_gbif_issue,
                                                         occ_wcvp_check_name = names.checked,
                                                         occ_collectorsDictionary = occ_collectorsDictionary$occ_collectorsDictionary,
                                                         silence = FALSE)


names(occ_digital_voucher)


file.occ_digital_voucher <-  'C:\\Dados\\Kew\\data\\download\\Myrtaceae\\occ_digital_voucher.csv'

write.csv(occ_digital_voucher$occ_digital_voucher,
          file.occ_digital_voucher, 
          row.names = FALSE, 
          fileEncoding = "UTF-8", 
          na = "")


#
results <- parseGBIF::export_data(occ_digital_voucher_file = file.occ_digital_voucher,
                                  merge_unusable_data = FALSE,
                                  silence = FALSE)

# results <- export_data(occ_digital_voucher_file = file.occ_digital_voucher,
#                        merge_unusable_data = FALSE)

names(results)

results$parseGBIF_general_summary
results$parseGBIF_merge_fields_summary
results$parseGBIF_merge_fields_summary_complete

NROW(results$all_data)
NROW(results$unique_collection_event_complete_merge)
NROW(results$unique_collection_event_incomplete_raw)
NROW(results$duplicates)


index <- results$useable_data_merge$Ctrl_key_family_recordedBy_recordNumber %in% 'ACHATOCARPACEAE_ZARDINI_5592'

print('merged fields')
print(jsonlite::fromJSON(results$useable_data_merge$parseGBIF_duplicates_map[index==TRUE]))

print('merged fields map')
print(jsonlite::fromJSON(results$useable_data_merge$parseGBIF_merged_fields[index==TRUE]))

print('Frequency of content in fields')
print(jsonlite::fromJSON(results$useable_data_merge$parseGBIF_freq_duplicate_or_missing_data[index==TRUE]))


colnames(results$all_data)

NROW(results$occ_in_merge)
NROW(results$occ_in_raw)
NROW(results$occ_out_to_recover_merge)
NROW(results$occ_out_to_recover_raw)
NROW(results$occ_dup)

results$



for(i in 1:NROW(results$occ_in_merge))
{
  if(results$occ_in_merge$parseGBIF_merged[i] == FALSE)
  {
    next
  }
  print(i)
  
  print('campos')
  
  print(jsonlite::fromJSON(results$occ_in_merge$parseGBIF_merged_fields[i]))
  
  print('map')
  
  print(jsonlite::fromJSON(results$occ_in_merge$parseGBIF_duplicates_map[i]))
  
  print(jsonlite::fromJSON(results$occ_in_merge$parseGBIF_freq_duplicate_or_missing_data[i]))
  
  # stop()
}  


file.occ_all <-  'occ_all.csv'
write.csv(results$occ_all,
          file.occ_all,
          row.names = FALSE,
          fileEncoding = "UTF-8",
          na = "")

file.occ_in_merge <-  'occ_in_merge.csv'
write.csv(results$occ_in_merge,
          file.occ_in_merge,
          row.names = FALSE,
          fileEncoding = "UTF-8",
          na = "")



file.occ_in <-  'occ_raw.csv'
write.csv(results$occ_raw,
          file.occ_in,
          row.names = FALSE,
          fileEncoding = "UTF-8",
          na = "")


file.occ_out_to_recover <-  'occ_out_to_recover.csv'
write.csv(results$occ_out_to_recover,
          file.occ_out_to_recover,
          row.names = FALSE,
          fileEncoding = "UTF-8",
          na = "")


file.occ_dup <-  'occ_dup.csv'
write.csv(results$occ_dup,
          file.occ_dup,
          row.names = FALSE,
          fileEncoding = "UTF-8",
          na = "")


sum(results$occ_dup$Ctrl_key_family_recordedBy_recordNumber %in% 'ACHATOCARPACEAE_ZARDINI_5592')

sum(results$occ_in_merge$Ctrl_key_family_recordedBy_recordNumber %in% 'ACHATOCARPACEAE_ZARDINI_5592')

results$occ_in_merge$parseGBIF_duplicates_map[results$occ_in_merge$Ctrl_key_family_recordedBy_recordNumber %in% 'ACHATOCARPACEAE_ZARDINI_5592']

results$occ_in_merge$parseGBIF_merged_fields[results$occ_in_merge$Ctrl_key_family_recordedBy_recordNumber %in% 'ACHATOCARPACEAE_ZARDINI_5592']

print('campos')
print(jsonlite::fromJSON(results$occ_in_merge$parseGBIF_duplicates_map[results$occ_in_merge$Ctrl_key_family_recordedBy_recordNumber %in% 'ACHATOCARPACEAE_ZARDINI_5592']))

print('map')
print(jsonlite::fromJSON(results$occ_in_merge$parseGBIF_merged_fields[results$occ_in_merge$Ctrl_key_family_recordedBy_recordNumber %in% 'ACHATOCARPACEAE_ZARDINI_5592']))

print('freq')
print(jsonlite::fromJSON(results$occ_in_merge$parseGBIF_freq_duplicate_or_missing_data[results$occ_in_merge$Ctrl_key_family_recordedBy_recordNumber %in% 'ACHATOCARPACEAE_ZARDINI_5592']))




results <- list(occ_in_merge = occ_res_full,
                    occ_raw = occ_in,
                    occ_dup = occ_dup,
                    occ_out_to_recover = occ_out_to_recover)

# results$occ_in_merge %>% View(title = 'merge')



ind_t <- results$occ_in_merge$Ctrl_key_family_recordedBy_recordNumber == 'ACHATOCARPACEAE_ZARDINI_5592'
results$occ_in_merge[ind_t==TRUE,]$parseGBIF_merged_fields
results$occ_in_merge[ind_t==TRUE,]$parseGBIF_duplicates_map



{
  
  {
    #' @details limpar memória
    rm(list = ls())
    
    #' @details direcionar memória para processamento temporário em disco
    { 
      if (!dir.exists("c:/R_temp")){dir.create("c:/R_temp")}
      tempdir <- function() "c:/R_temp"
      unlockBinding("tempdir", baseenv()) 
      assignInNamespace("tempdir", tempdir, ns="base", envir=baseenv())
      assign("tempdir", tempdir, baseenv())
      lockBinding("tempdir", baseenv())
      tempdir()
    }
    
    #' @details carregar funcões para mensurar tempos de processamento
    {
      tempo_processo <- data.frame(nome_processo=NA,
                                   tempo_processamento=NA)[-1,]
      
      inicia_tempo_processamento <- function(nome_processo='',
                                             tempo_processo=NA)
      {
        return(list(ini.time = Sys.time(),
                    nome_processo=nome_processo,
                    tempo_processo=tempo_processo))
      }  
      
      get_tempo_processamento <- function(tempo_processo_tmp)
      {
        
        tempo_processamento <- difftime(Sys.time(), tempo_processo_tmp$ini.time , units = 'min')
        tempo_processo <- rbind(tempo_processo_tmp$tempo_processo,
                                data.frame(nome_processo=tempo_processo_tmp$nome_processo,
                                           tempo_processamento=tempo_processamento))
        print(tempo_processo)
        return(tempo_processo)
      }  
    }
    
    #' @details inicar tempo de processamento
    tempo_processo_tmp <- inicia_tempo_processamento('Preparação do ambiente de trabalho em R', tempo_processo)
    #' @details carregar pacotes básicos
    {
      library(parseGBIF)
    }
    
    #' @details finalizar tempo de processamento
    tempo_processo <- get_tempo_processamento(tempo_processo_tmp)
    
  }
  
  
  path.pkg <- 'C:\\parseGBIF - github.com\\parseGBIF'
  setwd(path.pkg)
  
  # devtools::install_github("pablopains/parseGBIF")
  
  
  library(parseGBIF)
  
  library(stringr)
  library(dplyr)
  
  # path.pkg <- 'C:\\parseGBIF - github.com\\parseGBIF'
  # setwd(path.pkg)
  # devtools::load_all(as.package(path.pkg))
  
  #
  tempo_processo_tmp <- inicia_tempo_processamento('prepare_gbif_occurrence_data: ', tempo_processo)
  
  occ_file <- 'C:\\Dados\\Kew\\data\\download\\Myrtaceae\\occurrence.txt'
  
  occ <- parseGBIF::prepare_gbif_occurrence_data(gbif_occurrece_file = occ_file, columns = 'standard')
  
  head(occ)
  
  tempo_processo <- get_tempo_processamento(tempo_processo_tmp)
  
  
  #
  tempo_processo_tmp <- inicia_tempo_processamento('select_digital_voucher: ', tempo_processo)
  
  # occ_gbif_issue <- occ_gbif_issue$occ_gbif_issue 
  file.occ_gbif_issue <-  'C:\\Dados\\Kew\\data\\download\\Myrtaceae\\file_occ_gbif_issue.csv'
  occ_gbif_issue <- readr::read_delim(file = file.occ_gbif_issue,
                                      delim = ',',
                                      locale = readr::locale(encoding = "UTF-8"),
                                      show_col_types = FALSE) %>%
    data.frame()
  NROW(occ_gbif_issue)
  
  file.names.checked <-  'C:\\Dados\\Kew\\data\\download\\Myrtaceae\\file_wcvp_check_name.csv'
  names.checked <- readr::read_delim(file = file.names.checked,
                                     delim = ',',
                                     locale = readr::locale(encoding = "UTF-8"),
                                     show_col_types = FALSE) %>%
    data.frame()
  NROW(names.checked)
  

  file.occ_collectorsDictionary <-  'C:\\Dados\\Kew\\data\\download\\Myrtaceae\\occ_collectorsDictionary.csv'
  occ_collectorsDictionary <- readr::read_delim(file = file.occ_collectorsDictionary,
                                     delim = ',',
                                     locale = readr::locale(encoding = "UTF-8"),
                                     show_col_types = FALSE) %>%
    data.frame()
  NROW(occ_collectorsDictionary)
  

  occ_digital_voucher <- select_digital_voucher_v2(occ = occ,
                                                occ_gbif_issue = occ_gbif_issue,
                                                occ_wcvp_check_name = names.checked,
                                                occ_collectorsDictionary = occ_collectorsDictionary,
                                                silence = FALSE)
  
  
  names(occ_digital_voucher)
  
  
  file.occ_digital_voucher <-  'C:\\Dados\\Kew\\data\\download\\Myrtaceae\\occ_digital_voucher.csv'
  write.csv(occ_digital_voucher$occ_digital_voucher,
            file.occ_digital_voucher, 
            row.names = FALSE, 
            fileEncoding = "UTF-8", 
            na = "")
  
  tempo_processo <- get_tempo_processamento(tempo_processo_tmp)
  
  #
  
  
  
}

# 
# 
# names(results)
# 
# 
# NROW(results$occ_in)
# 
# NROW(results$occ_out_to_recover)
# 
# NROW(results$occ_dup)
# 
# NROW(results$occ_in_merged)
# colnames(results$occ_in_merged)
# 
# View(results$occ_in_merged)
# 
# jsonlite::fromJSON(results$occ_in_merged$parseGBIF_merged_fields[54])
# 
# jsonlite::fromJSON(results$occ_in_merged$parseGBIF_merged_fields[54])
# 
# results$occ_in$Ctrl_gbifID[54]
# results$occ_in$Ctrl_language[54]
# 
# results$occ_in_merged$Ctrl_language[54]
# results$occ_in_merged$Ctrl_gbifID[54]
# 
# 
# index <- occ_dup$Ctrl_occurrenceID == "2683178"
# occ_dup[index==TRUE,]


results$all_data
