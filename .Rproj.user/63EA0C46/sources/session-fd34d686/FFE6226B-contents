{
  #' @details limpar memória
  rm(list = ls())

  #' @details direcionar memória para processamento temporário em disco
  {
    if (!dir.exists("c:/R_temp")){dir.create("c:/R_temp")}
    tempdir <- function() "c:/R_temp"
    unlockBinding("tempdir", baseenv())
    assignInNamespace("tempdir", tempdir, ns="base", envir=baseenv())
    assign("tempdir", tempdir, baseenv())
    lockBinding("tempdir", baseenv())
    tempdir()
  }

  #' @details carregar funcões para mensurar tempos de processamento
  {
    tempo_processo <- data.frame(nome_processo=NA,
                                 tempo_processamento=NA)[-1,]

    inicia_tempo_processamento <- function(nome_processo='',
                                           tempo_processo=NA)
    {
      return(list(ini.time = Sys.time(),
                  nome_processo=nome_processo,
                  tempo_processo=tempo_processo))
    }

    get_tempo_processamento <- function(tempo_processo_tmp)
    {

      tempo_processamento <- difftime(Sys.time(), tempo_processo_tmp$ini.time , units = 'min')
      tempo_processo <- rbind(tempo_processo_tmp$tempo_processo,
                              data.frame(nome_processo=tempo_processo_tmp$nome_processo,
                                         tempo_processamento=tempo_processamento))
      print(tempo_processo)
      return(tempo_processo)
    }
  }

  #' @details inicar tempo de processamento
  tempo_processo_tmp <- inicia_tempo_processamento('Preparação do ambiente de trabalho em R', tempo_processo)
  #' @details carregar pacotes básicos
  {
    # devtools::install_github("pablopains/parseGBIF")

    library(parseGBIF)

    library(stringr)
    library(dplyr)

  }

  #' @details finalizar tempo de processamento
  tempo_processo <- get_tempo_processamento(tempo_processo_tmp)

}

path_data <- 'C:\\Dados\\Kew\\data\\download\\Myrtaceae'

'C:\\Dados\\Kew\\data\\download\\Myrtaceae\\parseGBIF_export\\parseGBIF_all_data_II.csv'

file.name <-  paste0(path_data,'\\parseGBIF_all_data\\','parseGBIF_all_data_II.csv')

file.name <- 'C:\\Dados\\Kew\\data\\download\\Myrtaceae\\parseGBIF_export\\parseGBIF_export_all_data.csv'

occ_tmp <- readr::read_delim(file = file.name,
                             delim = ',',
                             locale = readr::locale(encoding = "UTF-8"),
                             show_col_types = FALSE) %>% data.frame()


occ_tmp <- occ_tmp %>%
  dplyr::mutate(wcvp_searchedName = '')

occ_tmp$wcvp_searchedName %>% unique()



name_search_wcvp <- occ_tmp$Ctrl_scientificName %>% unique() %>% as.character()

wcvp_names <-  wcvp_get_data_v2.1(read_only_to_memory = TRUE,
                                     load_rda_data = TRUE)$wcvp_names

colnames(wcvp_names)

i <- 1
tot_rec <- NROW(name_search_wcvp)


for(i in 1:tot_rec)
{
  sp_tmp <- name_search_wcvp[i]


  x_tmp <- parseGBIF::standardize_scientificName(sp_tmp)

  index <- occ_tmp$Ctrl_scientificName %in% sp_tmp

  occ_tmp$wcvp_searchedName[index==TRUE] <- x_tmp$standardizeName

  print( paste0( i, '-',tot_rec ,' ',  sp_tmp, ' -> ', x_tmp$standardizeName))

}


file.occ_all <-  'C:\\Dados\\Kew\\data\\download\\Myrtaceae\\occurrence.txt'
occ <- parseGBIF::prepare_gbif_occurrence_data(file.occ_all)

occ <- occ %>%
  dplyr::select(Ctrl_gbifID,
                Ctrl_taxonRank,
                Ctrl_catalogNumber)


file.occ_all <-  'C:\\Dados\\Kew\\data\\download\\Myrtaceae\\parseGBIF_export\\parseGBIF_export_all_data_wcvp_searchedName.csv'
write.csv(occ_tmp,
          file.occ_all,
          row.names = FALSE,
          fileEncoding = "UTF-8",
          na = "")


occ_tmp <- readr::read_delim(file = file.occ_all,
                             delim = ',',
                             locale = readr::locale(encoding = "UTF-8"),
                             show_col_types = FALSE) %>% data.frame()

occ_tmp <- occ_tmp %>%
  dplyr::arrange(Ctrl_gbifID,Ctrl_catalogNumber)
NROW(occ_tmp)

occ <- occ %>%
  dplyr::arrange(Ctrl_gbifID,Ctrl_catalogNumber)
NROW(occ)

occ[1843,]$Ctrl_catalogNumber == occ_tmp[1843,]$Ctrl_catalogNumber
occ[NROW(occ),]$Ctrl_catalogNumber == occ_tmp[NROW(occ_tmp),]$Ctrl_catalogNumber

occ_tmp <- cbind(occ_tmp,
                 occ %>%
                   dplyr::select(-Ctrl_catalogNumber,
                                 -Ctrl_gbifID))


occ_tmp$wcvp_searchedName

# binomial
{
# binomial_tmp <- stringr::str_split(occ_tmp$parseGBIF_sample_taxon_name, ' ', simplify = T)
#
# binomial_tmp <- paste0(binomial_tmp[,1], ' ', ifelse(binomial_tmp[,2] != '×',
#                                                      binomial_tmp[,2],
#                                                      paste0('× ',binomial_tmp[,3])))
#
#
# binomial_tmp %>% unique()
}

occ_all <- data.frame(Ctrl_gbifID = occ_tmp$Ctrl_gbifID,
                      Ctrl_catalogNumber = occ_tmp$Ctrl_catalogNumber,
                      Ctrl_taxonRank = occ_tmp$Ctrl_taxonRank,
                      parseGBIF_sample_taxon_name = occ_tmp$parseGBIF_sample_taxon_name)



# index <- toupper(occ_all$Ctrl_taxonRank) %in%
#   toupper(c('SPECIES',
#             'VARIETY',
#             'SUBSPECIES',
#             'FORM'))
# name_search_wcvp <- occ_all$sample_taxon_name_binomial %>% unique() %>% as.character()


index <- is.na(occ_all$parseGBIF_sample_taxon_name)==FALSE

name_search_wcvp <- occ_all[index==TRUE,]$parseGBIF_sample_taxon_name %>% unique() %>% as.character()


{
  wcvp_na <- data.frame(wcvp_plant_name_id  = NA,
                        # wcvp_ipni_id = NA,
                        wcvp_taxon_rank = NA,
                        wcvp_taxon_status = NA,
                        wcvp_family = NA,
                        # wcvp_genus_hybrid = NA,
                        # wcvp_genus = NA,
                        # wcvp_species_hybrid = NA,
                        # wcvp_species = NA,
                        # wcvp_infraspecific_rank = NA,
                        # wcvp_infraspecies = NA,
                        # wcvp_parenthetical_author = NA,
                        # wcvp_primary_author = NA,
                        # wcvp_publication_author = NA,
                        # wcvp_place_of_publication = NA,
                        # wcvp_volume_and_page = NA,
                        # wcvp_first_published = NA,
                        # wcvp_nomenclatural_remarks = NA,
                        # wcvp_geographic_area = NA,
                        # wcvp_lifeform_description = NA,
                        # wcvp_climate_description = NA,
                        wcvp_taxon_name = NA,
                        wcvp_taxon_authors = NA,
                        wcvp_accepted_plant_name_id = NA,
                        # wcvp_basionym_plant_name_id = NA,
                        # wcvp_replaced_synonym_author = NA,
                        # wcvp_homotypic_synonym = NA,
                        # wcvp_parent_plant_name_id = NA,
                        # wcvp_powo_id = NA,
                        # wcvp_hybrid_formula = NA,
                        wcvp_reviewed = NA,
                        # # wcvp_TAXON_NAME_U = NA,
                        wcvp_searchedName = NA,
                        wcvp_taxon_status_of_searchedName = NA,
                        wcvp_plant_name_id_of_searchedName = NA,
                        wcvp_taxon_authors_of_searchedName = NA,
                        wcvp_verified_author = NA,
                        wcvp_verified_speciesName = NA,
                        wcvp_searchNotes = NA)
  colunas_wcvp_sel <- colnames(wcvp_na)

  occ_all <- cbind(occ_all, wcvp_na)

}

i <- 1632
tot_rec <- NROW(name_search_wcvp)
tot_rec
for(i in 1:tot_rec)
{
  sp_tmp <- name_search_wcvp[i]

  x_tmp <- wcvp_check_name(searchedName = sp_tmp,
                           wcvp_names = wcvp_names,
                           if_author_fails_try_without_combinations = TRUE)

  index <- occ_all$parseGBIF_sample_taxon_name %in% sp_tmp
  occ_all[index==TRUE, tidyselect::all_of(colunas_wcvp_sel)] <- x_tmp[, tidyselect::all_of(colunas_wcvp_sel)]

  print( paste0( i, '-',tot_rec ,' ',  sp_tmp, ' ', x_tmp$wcvp_searchNotes))
}


colnames(occ_all)

colnames(occ_tmp)

colnames(occ_all)

occ_all[1843,]$Ctrl_catalogNumber == occ_tmp[1843,]$Ctrl_catalogNumber
occ_all[NROW(occ),]$Ctrl_catalogNumber == occ_tmp[NROW(occ_tmp),]$Ctrl_catalogNumber

occ_all2 <- occ_all %>%
  dplyr::select(-Ctrl_gbifID,
                -Ctrl_catalogNumber,
                -Ctrl_taxonRank,
                -Ctrl_taxonRank,
                -parseGBIF_sample_taxon_name)
View(occ_all)

colnames(occ_all2)

colnames(occ_all2) <- paste0('parseGBIF_',colnames(occ_all2))

colnames(occ_all2)

occ_all3 <- cbind(occ_tmp,occ_all2) %>%
  dplyr::select(Ctrl_gbifID,
    Ctrl_bibliographicCitation,
    Ctrl_language,
    Ctrl_institutionCode,
    Ctrl_collectionCode,
    Ctrl_datasetName,
    Ctrl_basisOfRecord,
    Ctrl_catalogNumber,
    Ctrl_recordNumber,
    Ctrl_recordedBy,
    Ctrl_occurrenceStatus,
    Ctrl_eventDate,
    Ctrl_year,
    Ctrl_month,
    Ctrl_day,
    Ctrl_habitat,
    Ctrl_fieldNotes,
    Ctrl_eventRemarks,
    Ctrl_countryCode,
    Ctrl_stateProvince,
    Ctrl_municipality,
    Ctrl_county,
    Ctrl_locality,
    Ctrl_level0Name,
    Ctrl_level1Name,
    Ctrl_level2Name,
    Ctrl_level3Name,
    Ctrl_identifiedBy,
    Ctrl_dateIdentified,
    Ctrl_scientificName,
    Ctrl_decimalLatitude,
    Ctrl_decimalLongitude,

    Ctrl_taxonRank,

    Ctrl_nameRecordedBy_Standard,
    Ctrl_recordNumber_Standard,
    Ctrl_key_family_recordedBy_recordNumber,
    Ctrl_geospatial_quality,
    Ctrl_verbatim_quality,
    Ctrl_moreInformativeRecord,
    Ctrl_coordinates_validated_by_gbif_issue,

    wcvp_plant_name_id,
    wcvp_taxon_rank,
    wcvp_taxon_status,
    wcvp_family,
    wcvp_taxon_name,
    wcvp_taxon_authors,
    wcvp_reviewed,
    wcvp_searchedName,
    wcvp_searchNotes,

    parseGBIF_digital_voucher,
    parseGBIF_duplicates,
    parseGBIF_num_duplicates,
    parseGBIF_non_groupable_duplicates,
    parseGBIF_duplicates_grouping_status,
    parseGBIF_unidentified_sample,
    parseGBIF_sample_taxon_name,
    parseGBIF_sample_taxon_name_status,
    parseGBIF_number_taxon_names,
    parseGBIF_useful_for_spatial_analysis,
    parseGBIF_decimalLatitude,
    parseGBIF_decimalLongitude,
    parseGBIF_dataset_result,
    parseGBIF_freq_duplicate_or_missing_data,
    parseGBIF_duplicates_map,
    parseGBIF_merged_fields,
    parseGBIF_merged,

    parseGBIF_wcvp_plant_name_id,
    parseGBIF_wcvp_taxon_rank,
    parseGBIF_wcvp_taxon_status,
    parseGBIF_wcvp_family,
    parseGBIF_wcvp_taxon_name,
    parseGBIF_wcvp_taxon_authors,
    parseGBIF_wcvp_accepted_plant_name_id,
    parseGBIF_wcvp_reviewed,
    parseGBIF_wcvp_searchedName,
    # parseGBIF_wcvp_taxon_status_of_searchedName,
    # parseGBIF_wcvp_plant_name_id_of_searchedName,
    # parseGBIF_wcvp_taxon_authors_of_searchedName,
    # parseGBIF_wcvp_verified_author,
    # parseGBIF_wcvp_verified_speciesName,
    parseGBIF_wcvp_searchNotes)


occ_all3$parseGBIF_wcvp_searchNotes %>% unique()

occ_all3$parseGBIF_wcvp_taxon_status %>% unique()

occ_all3$parseGBIF_wcvp_taxon_rank %>% unique()

colnames(occ_all3)
View(occ_all3 %>%
       dplyr::select(    Ctrl_scientificName,
                         Ctrl_taxonRank,
                         wcvp_searchedName,

                         wcvp_taxon_name,

                         parseGBIF_sample_taxon_name,
                         parseGBIF_sample_taxon_name_status,
                         parseGBIF_number_taxon_names,

                         parseGBIF_wcvp_taxon_rank,
                         parseGBIF_wcvp_taxon_status,
                         parseGBIF_wcvp_family,
                         parseGBIF_wcvp_taxon_name,
                         parseGBIF_wcvp_taxon_authors,

                         parseGBIF_wcvp_searchedName,
                         parseGBIF_wcvp_searchNotes))

file.occ_all <-  'C:\\Dados\\Kew\\data\\download\\Myrtaceae\\parseGBIF_export\\parseGBIF_export_all_data_II.csv'
write.csv(occ_all3,
          file.occ_all,
          row.names = FALSE,
          fileEncoding = "UTF-8",
          na = "")

res <-  parseGBIF_summary(parseGBIF_all_data = occ_all3 %>% data.frame())

file.occ_all <-  'C:\\Dados\\Kew\\data\\download\\Myrtaceae\\parseGBIF_export\\parseGBIF_general_summary_II.csv'
write.csv(res$parseGBIF_general_summary,
          file.occ_all,
          row.names = FALSE,
          fileEncoding = "UTF-8",
          na = "")


file.occ_all <-  'C:\\Dados\\Kew\\data\\download\\Myrtaceae\\parseGBIF_export\\parseGBIF_merge_fields_summary_II.csv'
write.csv(res$parseGBIF_merge_fields_summary,
          file.occ_all,
          row.names = FALSE,
          fileEncoding = "UTF-8",
          na = "")

file.occ_all <-  'C:\\Dados\\Kew\\data\\download\\Myrtaceae\\parseGBIF_export\\parseGBIF_merge_fields_summary_useable_data_II.csv'
write.csv(res$parseGBIF_merge_fields_summary_useable_data,
          file.occ_all,
          row.names = FALSE,
          fileEncoding = "UTF-8",
          na = "")

file.occ_all <-  'C:\\Dados\\Kew\\data\\download\\Myrtaceae\\parseGBIF_export\\parseGBIF_merge_fields_summary_unusable_data_II.csv'
write.csv(res$parseGBIF_merge_fields_summary_unusable_data,
          file.occ_all,
          row.names = FALSE,
          fileEncoding = "UTF-8",
          na = "")



any(occ_all2$parseGBIF_sample_taxon_name_binomial %in% 'NA')


{
  # so nessa 1a
  {
    occ_all2 <- occ_all2 %>%
      dplyr::mutate(parseGBIF_sample_taxon_name_binomial = parseGBIF_parseGBIF_sample_taxon_name_binomial)

    occ_all2 <- occ_all2 %>%
      dplyr::select(-parseGBIF_parseGBIF_sample_taxon_name_binomial)
  }

  # so nessa 2a
  {
    occ_all2$Ctrl_taxonRank <- occ_all2$parseGBIF_Ctrl_taxonRank
    occ_all2 <- occ_all2 %>%
      dplyr::select(-parseGBIF_Ctrl_taxonRank)
  }

}
