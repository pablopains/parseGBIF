{
  #' @details limpar memória
  rm(list = ls())

  #' @details direcionar memória para processamento temporário em disco
  {
    if (!dir.exists("c:/R_temp")){dir.create("c:/R_temp")}
    tempdir <- function() "c:/R_temp"
    unlockBinding("tempdir", baseenv())
    assignInNamespace("tempdir", tempdir, ns="base", envir=baseenv())
    assign("tempdir", tempdir, baseenv())
    lockBinding("tempdir", baseenv())
    tempdir()
  }

  #' @details carregar funcões para mensurar tempos de processamento
  {
    tempo_processo <- data.frame(nome_processo=NA,
                                 tempo_processamento=NA)[-1,]

    inicia_tempo_processamento <- function(nome_processo='',
                                           tempo_processo=NA)
    {
      return(list(ini.time = Sys.time(),
                  nome_processo=nome_processo,
                  tempo_processo=tempo_processo))
    }

    get_tempo_processamento <- function(tempo_processo_tmp)
    {

      tempo_processamento <- difftime(Sys.time(), tempo_processo_tmp$ini.time , units = 'min')
      tempo_processo <- rbind(tempo_processo_tmp$tempo_processo,
                              data.frame(nome_processo=tempo_processo_tmp$nome_processo,
                                         tempo_processamento=tempo_processamento))
      print(tempo_processo)
      return(tempo_processo)
    }
  }

  #' @details inicar tempo de processamento
  tempo_processo_tmp <- inicia_tempo_processamento('Preparação do ambiente de trabalho em R', tempo_processo)
  #' @details carregar pacotes básicos
  {
    devtools::install_github("pablopains/parseGBIF")

    library(parseGBIF)
    library(stringr)
    library(dplyr)

  }

  #' @details finalizar tempo de processamento
  tempo_processo <- get_tempo_processamento(tempo_processo_tmp)

}


# aws
path_data <- 'C:\\parseGBIF\\data\\Myrtaceae'
path_wcvp <- 'C:\\parseGBIF\\WCVP'


# path_data <- 'C:\\Users\\Pablo Hendrigo\\Downloads'
# path_wcvp <- 'C:\\Dados\\Kew\\data'

file.name.log <- paste0(path_data,'\\','log5.csv')
write.csv(tempo_processo, file.name.log, row.names = FALSE, fileEncoding = "UTF-8", na = "")


# prepare_gbif_occurrence_data
{
  tempo_processo_tmp <- inicia_tempo_processamento('prepare_gbif_occurrence_data', tempo_processo)

  occ_file <- paste0(path_data,'\\','occurrence.txt')

  occ <- parseGBIF::prepare_gbif_occurrence_data(gbif_occurrece_file = occ_file, columns = 'standard')

  file.name <- paste0(path_data,'\\','parseGBIF_1_occ_data.csv')
  write.csv(occ, file.name,
            row.names = FALSE, fileEncoding = "UTF-8", na = "")

  tempo_processo <- get_tempo_processamento(tempo_processo_tmp)
  write.csv(tempo_processo, file.name.log, row.names = FALSE, fileEncoding = "UTF-8", na = "")

  tempo_processo_tmp <- inicia_tempo_processamento('load occurrence data', tempo_processo)

  file.name <- paste0(path_data,'\\','parseGBIF_1_occ_data.csv')
  occ <- readr::read_delim(file = file.name,
                           delim = ',',
                           locale = readr::locale(encoding = "UTF-8"),
                           show_col_types = FALSE) %>% data.frame()

  tempo_processo <- get_tempo_processamento(tempo_processo_tmp)
  write.csv(tempo_processo, file.name.log, row.names = FALSE, fileEncoding = "UTF-8", na = "")

}



# 2
tempo_processo_tmp <- inicia_tempo_processamento('load files results: ', tempo_processo)

file.occ_gbif_issue <-  'C:\\parseGBIF\\data\\Myrtaceae\\file_occ_gbif_issue.csv'
occ_gbif_issue <- readr::read_delim(file = file.occ_gbif_issue,
                                    delim = ',',
                                    locale = readr::locale(encoding = "UTF-8"),
                                    show_col_types = FALSE) %>%
  data.frame()


file.names.checked <-  'C:\\parseGBIF\\data\\Myrtaceae\\file_wcvp_check_name.csv'
names.checked <- readr::read_delim(file = file.names.checked,
                                   delim = ',',
                                   locale = readr::locale(encoding = "UTF-8"),
                                   show_col_types = FALSE) %>%
  data.frame()



file.occ_collectorsDictionary <-  'C:\\parseGBIF\\data\\Myrtaceae\\occ_collectorsDictionary.csv'
occ_collectorsDictionary <- readr::read_delim(file = file.occ_collectorsDictionary,
                                              delim = ',',
                                              locale = readr::locale(encoding = "UTF-8"),
                                              show_col_types = FALSE) %>%
  data.frame()

tempo_processo <- get_tempo_processamento(tempo_processo_tmp)


# 3
key <- occ_collectorsDictionary$Ctrl_key_family_recordedBy_recordNumber %>% unique()
n_k <- NROW(key)
i_key <- 1:n_k

ind_k1 <- i_key <= (n_k/3)
ind_k2 <- i_key > (n_k/3) & i_key <= ((n_k/3)*2)
ind_k3 <- i_key > (n_k/3)*2
n_k
sum(ind_k1==TRUE) + sum(ind_k2==TRUE) + sum(ind_k3==TRUE)

i_k_1 <- occ_collectorsDictionary$Ctrl_key_family_recordedBy_recordNumber %in% key[ind_k1==TRUE]
i_k_2 <- occ_collectorsDictionary$Ctrl_key_family_recordedBy_recordNumber %in% key[ind_k2==TRUE]
i_k_3 <- occ_collectorsDictionary$Ctrl_key_family_recordedBy_recordNumber %in% key[ind_k3==TRUE]

occ_collectorsDictionary[i_k_1==TRUE,]$Ctrl_key_family_recordedBy_recordNumber %>%
  unique() %>% NROW() +

  occ_collectorsDictionary[i_k_2==TRUE,]$Ctrl_key_family_recordedBy_recordNumber %>%
  unique() %>% NROW() +

  occ_collectorsDictionary[i_k_3==TRUE,]$Ctrl_key_family_recordedBy_recordNumber %>%
  unique() %>% NROW()

occ_collectorsDictionary$Ctrl_key_family_recordedBy_recordNumber %>%
  unique() %>% NROW()

tempo_processo_tmp <- inicia_tempo_processamento('select_digital_voucher terço 1: ', tempo_processo)
occ_digital_voucher_t1 <- select_digital_voucher_v2.1(occ = occ[i_k_1==TRUE,],
                                                      occ_gbif_issue = occ_gbif_issue[i_k_1==TRUE,],
                                                      occ_wcvp_check_name = names.checked[i_k_1==TRUE,],
                                                      occ_collectorsDictionary = occ_collectorsDictionary[i_k_1==TRUE,],
                                                      silence = FALSE)
tempo_processo <- get_tempo_processamento(tempo_processo_tmp)
tempo_processo


tempo_processo_tmp <- inicia_tempo_processamento('select_digital_voucher terço 2: ', tempo_processo)
occ_digital_voucher_t2 <- select_digital_voucher_v2.1(occ = occ[i_k_2==TRUE,],
                                                      occ_gbif_issue = occ_gbif_issue[i_k_2==TRUE,],
                                                      occ_wcvp_check_name = names.checked[i_k_2==TRUE,],
                                                      occ_collectorsDictionary = occ_collectorsDictionary[i_k_2==TRUE,],
                                                      silence = FALSE)
tempo_processo <- get_tempo_processamento(tempo_processo_tmp)
tempo_processo

tempo_processo_tmp <- inicia_tempo_processamento('select_digital_voucher terço 3: ', tempo_processo)
occ_digital_voucher_t3 <- select_digital_voucher_v2.1(occ = occ[i_k_3==TRUE,],
                                                      occ_gbif_issue = occ_gbif_issue[i_k_3==TRUE,],
                                                      occ_wcvp_check_name = names.checked[i_k_3==TRUE,],
                                                      occ_collectorsDictionary = occ_collectorsDictionary[i_k_3==TRUE,],
                                                      silence = FALSE)
tempo_processo <- get_tempo_processamento(tempo_processo_tmp)
tempo_processo

occ_digital <- list(all_data =  {} %>% data.frame(stringsAsFactors = FALSE),
                    useable_data_raw = {},
                    duplicates = {},
                    unusable_data_raw = {},
                    occ_digital_voucher = {},
                    occ_results = {})

occ_digital$all_data <- rbind(occ_digital_voucher_t1$all_data,
                              occ_digital_voucher_t2$all_data,
                              occ_digital_voucher_t3$all_data)


occ_digital$useable_data_raw <- rbind(occ_digital_voucher_t1$useable_data_raw,
                                      occ_digital_voucher_t2$useable_data_raw,
                                      occ_digital_voucher_t3$useable_data_raw)


occ_digital$unusable_data_raw <- rbind(occ_digital_voucher_t1$unusable_data_raw,
                                       occ_digital_voucher_t2$unusable_data_raw,
                                       occ_digital_voucher_t3$unusable_data_raw)

occ_digital$occ_digital_voucher <- rbind(occ_digital_voucher_t1$occ_digital_voucher,
                                         occ_digital_voucher_t2$occ_digital_voucher,
                                         occ_digital_voucher_t3$occ_digital_voucher)

occ_digital$occ_results <- rbind(occ_digital_voucher_t1$occ_results,
                                 occ_digital_voucher_t2$occ_results,
                                 occ_digital_voucher_t3$occ_results)



# 4
file.name <-  'C:\\parseGBIF\\data\\Myrtaceae\\parseGBIF_all_data.csv'
write.csv(occ_digital$all_data,
          file.name,
          row.names = FALSE,
          fileEncoding = "UTF-8",
          na = "")

file.name <-  'C:\\parseGBIF\\data\\Myrtaceae\\parseGBIF_useable_data_raw.csv'
write.csv(occ_digital$useable_data_raw,
          file.name,
          row.names = FALSE,
          fileEncoding = "UTF-8",
          na = "")


file.name <-  'C:\\parseGBIF\\data\\Myrtaceae\\parseGBIF_duplicates.csv'
write.csv(occ_digital$duplicates,
          file.name,
          row.names = FALSE,
          fileEncoding = "UTF-8",
          na = "")

file.name <-  'C:\\parseGBIF\\data\\Myrtaceae\\parseGBIF_unusable_data_raw.csv'
write.csv(occ_digital$unusable_data_raw,
          file.name,
          row.names = FALSE,
          fileEncoding = "UTF-8",
          na = "")

file.name <-  'C:\\parseGBIF\\data\\Myrtaceae\\parseGBIF_occ_digital_voucher.csv'
write.csv(occ_digital$occ_digital_voucher,
          file.name,
          row.names = FALSE,
          fileEncoding = "UTF-8",
          na = "")

file.name <-  'C:\\parseGBIF\\data\\Myrtaceae\\parseGBIF_occ_results.csv'
write.csv(occ_digital$occ_results,
          file.name,
          row.names = FALSE,
          fileEncoding = "UTF-8",
          na = "")


# aws
path_data <- 'C:\\parseGBIF\\data\\Myrtaceae'
path_wcvp <- 'C:\\parseGBIF\\WCVP'

file.name.log <- paste0(path_data,'\\','log3.csv')
write.csv(tempo_processo, file.name.log, row.names = FALSE, fileEncoding = "UTF-8", na = "")

}

{
  tempo_processo_tmp <- inicia_tempo_processamento('load parseGBIF_all_data.csv', tempo_processo)

  file.name <-  'C:\\parseGBIF\\data\\Myrtaceae\\parseGBIF_all_data.csv'
  occ_digital_voucher <- readr::read_delim(file = file.name,
                                                delim = ',',
                                                locale = readr::locale(encoding = "UTF-8"),
                                                show_col_types = FALSE) %>% data.frame()

  tempo_processo <- get_tempo_processamento(tempo_processo_tmp)
  write.csv(tempo_processo, file.name.log, row.names = FALSE, fileEncoding = "UTF-8", na = "")


  {
    # 3
    key <- occ_digital_voucher$Ctrl_key_family_recordedBy_recordNumber %>% unique()
    n_k <- NROW(key)
    i_key <- 1:n_k

    ind_k1 <- i_key <= (n_k/3)
    ind_k2 <- i_key > (n_k/3) & i_key <= ((n_k/3)*2)
    ind_k3 <- i_key > (n_k/3)*2
    n_k
    sum(ind_k1==TRUE) + sum(ind_k2==TRUE) + sum(ind_k3==TRUE)

    i_k_1 <- occ_digital_voucher$Ctrl_key_family_recordedBy_recordNumber %in% key[ind_k1==TRUE]
    i_k_2 <- occ_digital_voucher$Ctrl_key_family_recordedBy_recordNumber %in% key[ind_k2==TRUE]
    i_k_3 <- occ_digital_voucher$Ctrl_key_family_recordedBy_recordNumber %in% key[ind_k3==TRUE]

    occ_digital_voucher[i_k_1==TRUE,]$Ctrl_key_family_recordedBy_recordNumber %>%
      unique() %>% NROW() +

      occ_digital_voucher[i_k_2==TRUE,]$Ctrl_key_family_recordedBy_recordNumber %>%
      unique() %>% NROW() +

      occ_digital_voucher[i_k_3==TRUE,]$Ctrl_key_family_recordedBy_recordNumber %>%
      unique() %>% NROW()

    occ_digital_voucher$Ctrl_key_family_recordedBy_recordNumber %>%
      unique() %>% NROW()

    tempo_processo_tmp <- inicia_tempo_processamento('export_data terço 1: ', tempo_processo)

    results_t1 <- export_data_v2.2(occ_digital_voucher_file = '',
                                occ_digital_voucher = occ_digital_voucher[i_k_1==TRUE,],
                                merge_unusable_data = TRUE,
                                silence = FALSE)

    tempo_processo <- get_tempo_processamento(tempo_processo_tmp)
    tempo_processo


    tempo_processo_tmp <- inicia_tempo_processamento('export_data terço 2: ', tempo_processo)

    results_t2 <- export_data_v2.2(occ_digital_voucher_file = '',
                                   occ_digital_voucher = occ_digital_voucher[i_k_2==TRUE,],
                                   merge_unusable_data = TRUE,
                                   silence = FALSE)

    tempo_processo <- get_tempo_processamento(tempo_processo_tmp)
    tempo_processo

    tempo_processo_tmp <- inicia_tempo_processamento('export_data terço 3: ', tempo_processo)

    results_t3 <- export_data_v2.2(occ_digital_voucher_file = '',
                                   occ_digital_voucher = occ_digital_voucher[i_k_3==TRUE,],
                                   merge_unusable_data = TRUE,
                                   silence = FALSE)

    tempo_processo <- get_tempo_processamento(tempo_processo_tmp)
    tempo_processo



    results <- list(    occ_all = {},
                        useable_data_merge = {},
                        useable_data_raw = {},
                        duplicates = {},
                        unusable_data_merge = {},
                        unusable_data_raw = {},
                        parseGBIF_general_summary = {},
                        parseGBIF_merge_fields_summary = {},
                        parseGBIF_merge_fields_summary_useable_data = {},
                        parseGBIF_merge_fields_summary_unusable_data = {})

    results$all_data <- rbind(results_t1$all_data,
                              results_t2$all_data,
                              results_t3$all_data)


    results$useable_data_merge <- rbind(results_t1$useable_data_merge,
                              results_t2$useable_data_merge,
                              results_t3$useable_data_merge)

    results$useable_data_raw <- rbind(results_t1$useable_data_raw,
                              results_t2$useable_data_raw,
                              results_t3$useable_data_raw)

    results$duplicates <- rbind(results_t1$duplicates,
                              results_t2$duplicates,
                              results_t3$duplicates)

    results$unusable_data_raw <- rbind(results_t1$unusable_data_raw,
                              results_t2$unusable_data_raw,
                              results_t3$unusable_data_raw)

    results$unusable_data_merge <- rbind(results_t1$unusable_data_merge,
                              results_t2$unusable_data_merge,
                              results_t3$unusable_data_merge)

    results$parseGBIF_general_summary <- rbind(results_t1$parseGBIF_general_summary,
                              results_t2$parseGBIF_general_summary,
                              results_t3$parseGBIF_general_summary)

    results$parseGBIF_merge_fields_summary <- rbind(results_t1$parseGBIF_merge_fields_summary,
                              results_t2$parseGBIF_merge_fields_summary,
                              results_t3$parseGBIF_merge_fields_summary)

    results$parseGBIF_merge_fields_summary_useable_data <- rbind(results_t1$parseGBIF_merge_fields_summary_useable_data,
                              results_t2$parseGBIF_merge_fields_summary_useable_data,
                              results_t3$parseGBIF_merge_fields_summary_useable_data)

    results$parseGBIF_merge_fields_summary_unusable_data <- rbind(results_t1$parseGBIF_merge_fields_summary_unusable_data,
                              results_t2$parseGBIF_merge_fields_summary_unusable_data,
                              results_t3$parseGBIF_merge_fields_summary_unusable_data)

    # 4
    file.name <-  'C:\\parseGBIF\\data\\Myrtaceae\\parseGBIF_export_all_data.csv'
    write.csv(results$all_data,
              file.name,
              row.names = FALSE,
              fileEncoding = "UTF-8",
              na = "")



    file.name <-  'C:\\parseGBIF\\data\\Myrtaceae\\parseGBIF_export_useable_data_merge.csv'
    write.csv(results$useable_data_merge,
              file.name,
              row.names = FALSE,
              fileEncoding = "UTF-8",
              na = "")


    file.name <-  'C:\\parseGBIF\\data\\Myrtaceae\\parseGBIF_export_useable_data_raw.csv'
    write.csv(results$useable_data_raw,
              file.name,
              row.names = FALSE,
              fileEncoding = "UTF-8",
              na = "")


    file.name <-  'C:\\parseGBIF\\data\\Myrtaceae\\parseGBIF_export_duplicates.csv'
    write.csv(results$duplicates,
              file.name,
              row.names = FALSE,
              fileEncoding = "UTF-8",
              na = "")


    file.name <-  'C:\\parseGBIF\\data\\Myrtaceae\\parseGBIF_export_unusable_data_merge.csv'
    write.csv(results$unusable_data_merge,
              file.name,
              row.names = FALSE,
              fileEncoding = "UTF-8",
              na = "")

    file.name <-  'C:\\parseGBIF\\data\\Myrtaceae\\parseGBIF_export_unusable_data_raw.csv'
    write.csv(results$results$unusable_data_raw,
              file.name,
              row.names = FALSE,
              fileEncoding = "UTF-8",
              na = "")

    file.name <-  'C:\\parseGBIF\\data\\Myrtaceae\\parseGBIF_export_merge_fields_summary_unusable_data.csv'
    write.csv(results$parseGBIF_merge_fields_summary_unusable_data,
              file.name,
              row.names = FALSE,
              fileEncoding = "UTF-8",
            na = "")



    file.name <-  'C:\\parseGBIF\\data\\Myrtaceae\\parseGBIF_export_merge_fields_summary_useable_data.csv'
    write.csv(results$parseGBIF_merge_fields_summary_useable_data,
              file.name,
              row.names = FALSE,
              fileEncoding = "UTF-8",
              na = "")


    file.name <-  'C:\\parseGBIF\\data\\Myrtaceae\\parseGBIF_export_merge_fields_summary.csv'
    write.csv(results$parseGBIF_merge_fields_summary,
              file.name,
              row.names = FALSE,
              fileEncoding = "UTF-8",
              na = "")

    file.name <-  'C:\\parseGBIF\\data\\Myrtaceae\\parseGBIF_export_general_summary.csv'
    write.csv(results$parseGBIF_general_summary,
              file.name,
              row.names = FALSE,
              fileEncoding = "UTF-8",
              na = "")

  }


  tempo_processo_tmp <- inicia_tempo_processamento('export_data', tempo_processo)

  results <- export_data_v2.1(occ_digital_voucher_file = '',
                              occ_digital_voucher = occ_digital_voucher_v2.1,
                              merge_unusable_data = TRUE,
                              silence = FALSE)








  tempo_processo <- get_tempo_processamento(tempo_processo_tmp)
  write.csv(tempo_processo, file.name.log, row.names = FALSE, fileEncoding = "UTF-8", na = "")

}


